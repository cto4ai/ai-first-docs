name: Initialize Template

# Only runs once when repository is created from template
on:
  push:
    branches: [main]

jobs:
  initialize:
    if: github.repository != 'cto4ai/ai-first-docs'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Personalize repository
        run: |
          # Basic template variable replacement using repository information
          REPO_NAME="${{ github.event.repository.name }}"
          GITHUB_ORG="${{ github.repository_owner }}"
          COMPANY_NAME="${{ github.repository_owner }}"
          ORGANIZATION_DOMAIN="${GITHUB_ORG}.com"
          PRIMARY_USE_CASE="Company documentation and policies"

          echo "Personalizing repository with:"
          echo "  REPO_NAME: $REPO_NAME"
          echo "  GITHUB_ORG: $GITHUB_ORG"
          echo "  COMPANY_NAME: $COMPANY_NAME"
          echo "  ORGANIZATION_DOMAIN: $ORGANIZATION_DOMAIN"

          # Create personalized CLAUDE.md from template
          if [ -f "CLAUDE.md.template" ]; then
            echo "Creating personalized CLAUDE.md from template..."
            sed \
              -e "s/{{ORGANIZATION_NAME}}/$COMPANY_NAME/g" \
              -e "s/{{REPOSITORY_NAME}}/$REPO_NAME/g" \
              -e "s/{{ORGANIZATION_DOMAIN}}/$ORGANIZATION_DOMAIN/g" \
              -e "s/{{PRIMARY_USE_CASE}}/$PRIMARY_USE_CASE/g" \
              -e "s/{{GITHUB_OWNER}}/$GITHUB_ORG/g" \
              -e "s/{{MCP_SETUP_STATUS}}/Ready for MCP configuration - see setup guide/g" \
              "CLAUDE.md.template" > "CLAUDE.md"

            # Remove template file
            rm "CLAUDE.md.template"
            echo "‚úÖ CLAUDE.md created and personalized for $COMPANY_NAME"
          else
            echo "‚ö†Ô∏è CLAUDE.md.template not found - skipping Claude configuration"
          fi

          # Personalize prompt templates with repository information
          echo "Personalizing prompt templates..."

          if [ -f "docs/prompts/doc-repo-related/repo-access-instructions.md" ]; then
            sed -i.bak \
              -e "s/{{GITHUB_ORG}}/$GITHUB_ORG/g" \
              -e "s/{{REPO_NAME}}/$REPO_NAME/g" \
              "docs/prompts/doc-repo-related/repo-access-instructions.md"
            echo "‚úÖ Personalized repo-access-instructions.md (MCP_NAME left for manual configuration)"
          fi

          # Replace template variables in other files
          find . -name "*.md" -o -name "*.json" -o -name "*.yml" | grep -v node_modules | grep -v CLAUDE.md | grep -v "docs/prompts" | while read -r file; do
            echo "Processing: $file"
            sed -i.bak \
              -e "s/{{REPO_NAME}}/$REPO_NAME/g" \
              -e "s/{{GITHUB_ORG}}/$GITHUB_ORG/g" \
              -e "s/{{COMPANY_NAME}}/$COMPANY_NAME/g" \
              -e "s/{{ORGANIZATION_NAME}}/$COMPANY_NAME/g" \
              -e "s/{{REPOSITORY_NAME}}/$REPO_NAME/g" \
              -e "s/{{ORGANIZATION_DOMAIN}}/$ORGANIZATION_DOMAIN/g" \
              -e "s/{{DOCS_EMAIL}}/docs@${ORGANIZATION_DOMAIN}/g" \
              -e "s/{{SLACK_CHANNEL}}/#docs-help/g" \
              "$file"
          done

          # Clean up backup files
          find . -name "*.bak" -delete

          # Replace template README with user README
          mv USER_README.md README.md

          # Keep docs/examples for reference (AI-first difference)
          echo "Keeping example content for AI-first workflow reference"

          # Remove template instructions if they exist
          rm -f TEMPLATE_INSTRUCTIONS.md

      - name: Install dependencies
        run: |
          echo "Installing Node.js dependencies..."
          npm install
          echo "Dependencies installed successfully!"

      - name: Create setup issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ü§ñ AI-First Documentation Repository Ready!',
              body: `## Welcome to your personalized AI-first documentation repository!

              Your repository has been automatically configured with:
              - ‚úÖ Template variables replaced with your organization information
              - ‚úÖ Copy-paste prompts personalized in \`docs/prompts/doc-repo-related/\`
              - ‚úÖ Example policies available for reference and testing
              - ‚úÖ Dependencies installed and validation ready

              ### üöÄ Quick Start with Claude Desktop

              **For the best experience**, start each Claude Desktop chat by:
              1. Open \`docs/prompts/doc-repo-related/repo-access-instructions.md\`
              2. Replace \`{{MCP_NAME}}\` with your actual MCP configuration name from Claude Desktop settings
              3. Copy and paste the personalized prompt into Claude

              This tells Claude how to access your repository. Then try:
              - **"Show me the policies in this repository"**
              - **"Load the vacation policy"** (then use the coaxing prompt to open as artifact)
              - **"Create a new remote work policy for our company"**

              ### üìã Next Steps
              1. [ ] Set up GitHub Personal Access Token for AI integration
              2. [ ] Configure Claude Desktop or compatible AI interface
              3. [ ] Test AI editing with example content in \`docs/examples/\`
              4. [ ] Configure branch protection rules in Settings ‚Üí Branches
              5. [ ] Set up team permissions in Settings ‚Üí Manage access

              ### üõ†Ô∏è AI Integration Setup (For Non-Technical Users)
              1. **GitHub PAT**: Create organization-scoped fine-grained token
              2. **MCP Configuration**: Set up GitHub MCP in Claude Desktop
              3. **Copy Prompts**: Use prompts from \`docs/prompts/doc-repo-related/\` to start each chat
              4. **Test Workflow**: Try editing example policies with AI assistance
              5. **AI Workflow**: Direct commits to main branch (no PR required)

              ### üë®‚Äçüíª Technical Contributor Setup (Optional)
              For developers and technical writers who prefer traditional workflows:
              - **Pull Request Workflow**: Create PRs for documentation changes
              - **Full CI/CD Validation**: Automatic linting, spell check, and link validation
              - **Local Development**: Run \`npm run validate\` to check documentation quality
              - **Quality Assurance**: All manual edits go through validation before merge

              ### üîÑ Dual Workflow Benefits
              - **Non-technical users**: AI-first editing with no technical barriers
              - **Technical users**: Traditional PR workflow with full validation
              - **Quality maintained**: Each workflow has appropriate quality controls
              - **Team flexibility**: Choose the right workflow for each contributor

              ### üìñ Learn More
              - [AI-First Documentation Strategy](.github/DOCUMENTATION/ai-first-documentation-strategy.md)
              - [Example Policies](docs/examples/policies/) for reference
              - [Copy-Paste Prompts](docs/prompts/doc-repo-related/) for Claude Desktop
              - [Setup Guide](.claude/DOCUMENT_ASSISTANT.md) explains the prompt-based approach

              **Ready to revolutionize your documentation workflow?** Ask your AI assistant: *"How do I create my first company policy using this repository?"*

              You can close this issue when your AI-first workflow is set up and tested!`
            })
      
      - name: Commit personalized changes
        run: |
          # Delete this initialization workflow
          rm .github/workflows/init-template.yml

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Check if there are changes to commit
          if [[ -n $(git status --porcelain) ]]; then
            echo "Committing personalized changes..."
            git add -A
            git commit -m "Initialize documentation repository from template - Replace template variables with repository information - Remove example content and template instructions - Set up basic configuration - Remove initialization workflow"

            echo "Pushing changes..."
            git push
            echo "Repository initialization complete!"
          else
            echo "No changes to commit"
          fi
