# CLAUDE.md

This file provides guidance to **Claude Code** (claude.ai/code) when working with code in this repository.

## AI Integration Architecture

This repository uses a **dual AI configuration** approach:

- **`CLAUDE.md`** (this file): Configuration for **Claude Code** integration
  - Technical editing workflows
  - Development and validation processes
  - Repository structure and command reference
  - Best practices for code-assisted documentation work

- **`.claude/DOCUMENT_ASSISTANT.md`**: Instructions for **Claude Desktop Projects**
  - Business user editing workflows
  - Artifact-based visual document editing
  - Organization-specific assistant behavior
  - Non-technical user guidance

Both configurations work together to provide comprehensive AI-first documentation support for different user types and workflows.

## Repository Purpose

This is an **AI-first documentation repository** for **{{ORGANIZATION_NAME}}** implementing a paradigm shift where documentation is primarily accessed and maintained through AI tools rather than traditional human navigation. The core strategy is documented in `.github/DOCUMENTATION/ai-first-documentation-strategy.md`.

## Key Architecture Decision

This repository implements AI-first documentation workflows through Model Context Protocol (MCP) integration. The implementation follows one of these paths:

- **Option A**: Use existing MCP servers (`@modelcontextprotocol/server-filesystem`, `@modelcontextprotocol/server-github`)
- **Option B**: Build custom MCP server for specialized functionality
- **Hybrid**: Start with existing MCPs, add custom validation layers

See `.github/DOCUMENTATION/ai-first-documentation-strategy.md` for detailed comparison and decision framework.

## Essential Commands

### Development & Validation
```bash
# Install dependencies
npm install

# Run all validation checks
npm run validate

# Individual validation commands
npm run lint        # Markdown linting with markdownlint-cli2
npm run spell       # Spell check with cspell
npm run links       # Link validation with markdown-link-check

# Repository initialization (interactive setup)
npm run init

# Test repository setup
npm run test:setup
```

### Build Commands
```bash
# Build PDF documentation
npm run build:pdf

# Build static HTML site (MkDocs)
npm run build:html

# Serve documentation locally
npm run serve
```

## Directory Structure

```
docs/                           # Main documentation content
├── policies/                   # {{ORGANIZATION_NAME}} policies (AI-editable with constraints)
├── procedures/                 # Standard operating procedures
├── architecture/               # Technical documentation
├── guides/                     # How-to guides and tutorials
├── references/                 # API docs and reference materials
└── templates/                  # Document templates with AI instructions

.github/DOCUMENTATION/          # Meta-documentation (critical reading)
├── ai-first-documentation-strategy.md    # Core AI-first paradigm explanation
└── setup-guide.md             # Repository setup and configuration

scripts/                        # Utility scripts
└── init-repo.js               # Interactive repository personalization
```

## AI-First Features

### Semantic Markers for AI Interaction
Content includes special markers to guide AI behavior:
- `<!-- AI-CONTEXT: ... -->` - Provides context for AI processing
- `<!-- AI-READONLY -->` - Sections AI should never modify
- `<!-- AI-UPDATEABLE: type=statistics -->` - Content AI can update
- `<!-- AI-EXAMPLE: -->` - Examples AI can regenerate

### Metadata-Rich Frontmatter
Documents include AI-specific metadata:
```yaml
---
id: POL-SEC-001
ai_editable: true
ai_instructions: |
  - Update statistics quarterly
  - Never modify regulatory sections
ai_edit_constraints:
  - preserve_sections: [3, 4.2, 7]
  - require_human_approval: true
---
```

### Permission Model
AI write permissions are configured in `.github/ai-permissions.yaml` following the patterns documented in the strategy guide.

## Organization Context

### Company Information
- **Organization**: {{ORGANIZATION_NAME}}
- **Repository**: {{REPOSITORY_NAME}}
- **Domain**: {{ORGANIZATION_DOMAIN}}
- **Primary Use Case**: {{PRIMARY_USE_CASE}}

### Customization Notes
This repository has been personalized for {{ORGANIZATION_NAME}} from the [AI-First Documentation Template](https://github.com/cto4ai/ai-first-docs).

Key customizations applied:
- Organization-specific document templates
- Customized AI instructions for {{ORGANIZATION_NAME}} context
- Configured validation rules for {{ORGANIZATION_NAME}} standards
- Set up CI/CD workflows for {{ORGANIZATION_NAME}} requirements

## Workflow Integration

### Branch Strategy
- `doc/*` - Documentation changes
- `fix/*` - Corrections and fixes
- `feature/*` - New documentation sections

### AI Edit Workflows
1. **Immediate Update** - For low-risk content (statistics, examples)
2. **Reviewed Update** - For policy changes requiring human approval
3. **Autonomous Zones** - Specific paths where AI can commit directly

### {{ORGANIZATION_NAME}} Specific Guidelines
When working with {{ORGANIZATION_NAME}} documentation:
- Follow {{ORGANIZATION_NAME}} style guide conventions
- Respect confidentiality requirements for sensitive documents
- Ensure compliance with {{ORGANIZATION_NAME}} approval processes
- Maintain consistency with {{ORGANIZATION_NAME}} terminology

## MCP Integration

### Current Setup
{{MCP_SETUP_STATUS}} <!-- Will be populated during initialization -->

### MCP Implementation Notes

When implementing MCP integration:

1. **Phase 1**: Read-only AI access via existing MCP servers
2. **Phase 2**: Assisted updates with human review
3. **Phase 3**: Autonomous zones for specific content types
4. **Phase 4**: Self-maintaining documentation with AI proactive updates

The repository structure and validation workflows are designed to support AI-assisted editing through MCP-enabled tools.

### GitHub Integration
- **Repository**: {{GITHUB_OWNER}}/{{REPOSITORY_NAME}}
- **MCP Configuration**: See setup guide for Personal Access Token configuration
- **Artifact Integration**: Enabled for visual document editing

## Validation & Quality Control

All content changes (human or AI-generated) must pass:
- Markdown linting (`.markdownlint.json`)
- Spell checking (`cspell.json` - customized for {{ORGANIZATION_NAME}} terminology)
- Link validation
- GitHub Actions workflows (`.github/workflows/validate.yml`)

Pre-commit validation prevents issues and maintains quality regardless of contribution source.

## AI Assistant Instructions

### Working with {{ORGANIZATION_NAME}} Content
When editing documents in this repository:

1. **Respect {{ORGANIZATION_NAME}} Standards**
   - Follow established formatting conventions
   - Use approved terminology and language
   - Maintain professional tone appropriate for {{ORGANIZATION_NAME}}

2. **Handle Sensitive Information**
   - Be aware of confidential content requiring special handling
   - Follow {{ORGANIZATION_NAME}} data classification guidelines
   - Ensure appropriate access controls for sensitive documents

3. **Collaboration Guidelines**
   - Coordinate with {{ORGANIZATION_NAME}} stakeholders for policy changes
   - Use proper attribution for collaborative edits
   - Follow {{ORGANIZATION_NAME}} approval workflows for significant changes

### Document Types and Handling

#### Company Policies (`docs/policies/`)
- **Approval Required**: All policy changes require human review
- **Compliance**: Ensure alignment with legal and regulatory requirements
- **Attribution**: Track policy change requests and approvers

#### Procedures (`docs/procedures/`)
- **Direct Updates**: Can be updated immediately for clarity improvements
- **Accuracy**: Verify technical accuracy with subject matter experts
- **Testing**: Validate procedures through testing where possible

#### Guides (`docs/guides/`)
- **User-Focused**: Optimize for clarity and usability
- **Examples**: Include practical, {{ORGANIZATION_NAME}}-relevant examples
- **Maintenance**: Keep current with {{ORGANIZATION_NAME}} tools and processes